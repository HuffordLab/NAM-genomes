
function(numeric)calc_folded(integer nsize, object<Mutation> mut_vec, object<Genome> pops, object<Genome> samples, [logical frequency = T]){

    s_len = nsize + 1;
    sfs = rep(0, s_len);
    for(i in mut_vec){
        n_count = sum(samples.containsMutations(i));
        n0_count =  s_len - n_count;

        if(n_count >= n0_count){
            sfs[n0_count] =  sfs[n0_count] + 1;
        } else{
            sfs[n_count] =  sfs[n_count] + 1;
        }

        mut_lgl = sum(pops.containsMutations(i));
        if(sum(mut_lgl) / length(mut_lgl) == 1 | sum(mut_lgl) / length(mut_lgl) == 0){
            sfs[0] = sfs[0] + 1;
        }
    }

    if(frequency){
        sfs = sfs/sum(sfs);
    }
    return sfs;
}

/* old
20Mb stats
data/ref/Zm_0fold_per_window.txt
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   6249   87021  147290  161825  217104  414149 
data/ref/Zm_4fold_per_window.txt
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   1926   24729   41246   45862   61802  116015 
data/ref/Zm_bps_per_window.txt
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  15422  225260  363996  400808  532039  975534 
data/ref/Zm_cds_numbers.txt
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  1.000   2.000   4.000   5.351   7.000  79.000 
data/ref/Zm_cds_sizes.txt
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
    1.0    86.0   142.0   263.1   291.0  9171.0 
data/ref/Zm_genes_per_window.txt
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   15.0   193.0   289.0   315.7   410.0   750.0 
data/ref/Zm_intergenic.txt
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
      1    3676   27556   55217   75131 2518983 
data/ref/Zm_intragenic.txt
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
      1      98     252   12121    1536 2520778
*/


/* new
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
   8910  117044  203604  221278  298356  541273
data/ref/Zm_4fold_per_window.txt
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
   2730   33522   57655   63018   83595  154484
data/ref/Zm_bps_per_window.txt
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
  15767  205059  353975  385046  516058  937883
data/ref/Zm_cds_numbers.txt
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
  1.000   2.000   4.000   5.575   8.000  79.000
data/ref/Zm_cds_sizes.txt
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
    2.0    81.0   131.0   240.7   250.0  9171.0
data/ref/Zm_genes_per_window.txt
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
   14.0   187.0   296.0   321.4   428.0   776.0
data/ref/Zm_intergenic.txt
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
      1    3376   25920   53917   72750 2328921
data/ref/Zm_intragenic.txt
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
      1     100     248   11550    1468 2329212
*/

initialize(){
    //initializeTreeSeq(simplificationRatio=INF); //off for now.
    defineConstant("n_exons", 4);
    defineConstant("exon_size", 200);
    defineConstant("n_genes", 300);
    defineConstant("intron_size", 300);
    defineConstant("intergenic_size", 30000);
    defineConstant("fold0bps", 200000);
    defineConstant("fold4bps", 57000);
    sv_bps = n_exons * exon_size * n_genes;
    full_mu = mu +  mu_sv; 

    defineConstant("Tgen", 10*Na + B_t);
    defineConstant("growth_rate", log(N0/Nb)/(B_t - 1));
    initializeMutationType("m1", 0.5, "f", 0.0);
    initializeMutationType("m2", 0.5, "g", sfs1_mean, sfs1_shape);
    initializeMutationType("m3", 0.5, "g", sfs2_mean, sfs2_shape);
    m1.convertToSubstitution = T;
    m3.convertToSubstitution = T;
    initializeGenomicElementType("g1", c(m1, m2, m3), c(fold4bps*mu/full_mu, fold0bps*mu/full_mu, sv_bps*mu_sv/full_mu)); 
    initializeGenomicElementType("g2", m3, 1);

    //buffer for genomic element ends
    bp_buff = asInteger((loci  - (intergenic_size + n_exons * exon_size + intron_size * (n_exons - 1)) * n_genes)/2);

    base = bp_buff;
    initializeGenomicElement(g2, 0, base-1); 
    mu_vec = c(mu_sv);
    end_vec = c(base-1);

    while(base < loci - bp_buff){
        for(j in 1:n_genes){
            for(i in 1:(n_exons-1)){ //start and end on exon, so sim exon intron pairs
                initializeGenomicElement(g1, base, base+exon_size);
                initializeGenomicElement(g2, base+exon_size+1, base+exon_size+intron_size-1);
                mu_vec = c(mu_vec, full_mu, mu_sv);
                end_vec = c(end_vec, base+exon_size, base+exon_size+intron_size-1);
                base = base+exon_size+intron_size;
            }
            //make one more exon before the intergenic spacer
            initializeGenomicElement(g1, base, base+exon_size);
            initializeGenomicElement(g2, base+exon_size+1, base+exon_size+intergenic_size-1);
            
            mu_vec = c(mu_vec, full_mu, mu_sv);
            end_vec = c(end_vec, base+exon_size, base+exon_size+intergenic_size-1);
             
            
            base = base+exon_size+intergenic_size;
        }
    }
    initializeMutationRate(mu_vec, end_vec);
    initializeRecombinationRate(rr);
}

1 {

    print("start");

    sim.addSubpop("p1", Na); 
    sim.rescheduleScriptBlock(s1, start=1, end=Tgen-B_t-1);
    sim.rescheduleScriptBlock(s2, start=Tgen-B_t, end=Tgen-1);
    sim.rescheduleScriptBlock(s3, start=Tgen, end=Tgen);
}

s1 late(){

    //print("s1");
    //print(c(growth_rate, sim.generation, p1.individualCount));
    p1.setSubpopulationSize(Na);
}

s2 late(){

    //print("s2");
    //print(c(growth_rate, sim.generation, p1.individualCount));
    //print(sim.generation - Tgen + B_t);
    t = sim.generation - Tgen + B_t;
    p1_size = round(Nb * exp(growth_rate * t));
    p1.setSubpopulationSize(asInteger(p1_size));


}

s3 late() {
    

    allIndividuals = sim.subpopulations.genomes;
    sampledIndividuals = sample(allIndividuals, n_size);

    m1_vec = sim.mutations[sim.mutations.mutationType == m1];
    m2_vec = sim.mutations[sim.mutations.mutationType == m2];
    m3_vec = sim.mutations[sim.mutations.mutationType == m3];

    sfs1 = calc_folded(n_size, m1_vec, allIndividuals, sampledIndividuals, frequency = F);
    sfs2 = calc_folded(n_size, m2_vec, allIndividuals, sampledIndividuals, frequency = F);
    sfs3 = calc_folded(n_size, m3_vec, allIndividuals, sampledIndividuals, frequency = F);

    header_line = paste("#Na N0 Nb B_t mu_sv sfs1_shape sfs1_mean sfs2_shape sfs2_mean");
    data_line = paste(c(Na, N0, Nb, B_t, mu_sv, sfs1_shape, abs(sfs1_mean), sfs2_shape, abs(sfs2_mean)));

    cat("\n");
    cat(header_line);
    cat("\n");
    cat(data_line);
    cat("\n");

    cat(paste(c(n_size, "SFS:", sfs1[1:(size(sfs1)-1)], sfs2[1:(size(sfs2)-1)], sfs3[1:(size(sfs3)-1)], "\n")));
}


